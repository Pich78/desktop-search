/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.semantic.swing.topterms;

import com.semantic.util.swing.jlist.TopTermListCellRenderer;
import com.semantic.eventbus.GenericEventBus;
import com.semantic.eventbus.GenericEventListener;
import com.semantic.lucene.task.QueryResultEvent;
import com.semantic.swing.UIDefaults;
import com.semantic.swing.tree.querybuilder.IQueryBuilder;
import com.semantic.swing.tree.querybuilder.QueryRefreshAction;
import com.semantic.util.swing.jlist.RemoveableListManager;
import com.semantic.util.test.topterms.TopTerm;
import com.semantic.util.test.topterms.TopTermTableCellRenderer;
import com.semantic.util.test.topterms.TopTermsTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.*;
import org.apache.lucene.search.BooleanClause.Occur;

/**
 *
 * @author Christian Plonka (cplonka81@gmail.com)
 */
public class TopTermsResultView extends javax.swing.JPanel implements
        GenericEventListener<QueryResultEvent>, IQueryBuilder {

    /* on MAC not possible with generic(dont know why, it is since java5) */
    private DefaultListModel listModel;    
    private final Action refreshAction = new QueryRefreshAction();


    public TopTermsResultView() {
        initComponents();
        initOwnComponents();
    }

    private void initOwnComponents() {
        resultList.setModel(listModel = new DefaultListModel());
        listModel.addListDataListener(new TopTermListListener());
        resultList.setOpaque(false);
        resultList.setCellRenderer(new TopTermListCellRenderer());
        resultList.setVisibleRowCount(1);
        resultList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        resultList.setLayoutOrientation(JList.HORIZONTAL_WRAP);

        RemoveableListManager removeableListManager = new RemoveableListManager(resultList);

        jScrollPane1.setBorder(UIManager.getBorder(UIDefaults.BORDER_GRID_VIEW));

        resultTable.setModel(new TopTermsTableModel());
        resultTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

        TopTermTableCellRenderer renderer = new TopTermTableCellRenderer();
        resultTable.setDefaultRenderer(TopTerm.class, renderer);
        resultTable.addMouseMotionListener(renderer);
        resultTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        resultTable.addMouseListener(new TopTermTableListener());
        /* listen for query searched events */
        GenericEventBus.addEventListener(QueryResultEvent.class, this);
    }

    @Override
    public void handleEvent(QueryResultEvent event) {
        IndexSearcher searcher = event.getCurrentSearcher();
        ((TopTermsTableModel) resultTable.getModel()).setQuery(searcher, event.getQuery());
    }

    @Override
    public Query createQuery() {
        BooleanQuery.Builder ret = null;
        if (!listModel.isEmpty()) {
            ret = new BooleanQuery.Builder();
            for (int i = 0, size = listModel.size(); i < size; i++) {
                TopTerm topTerm = (TopTerm) listModel.get(i);
                ret.add(new TermQuery(new Term(
                        topTerm.getField(), topTerm.getTerm())), Occur.MUST);
            }
        }
        return ret.build();
    }

    @Override
    public Occur getCondition() {
        return Occur.MUST;
    }

    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        topTermPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        resultList = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);

        jScrollPane1.setViewportView(resultTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        topTermPanel.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(0));
        jPanel1.add(resultList);

        topTermPanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        add(topTermPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList resultList;
    private javax.swing.JTable resultTable;
    private javax.swing.JPanel topTermPanel;
    // End of variables declaration//GEN-END:variables

    class TopTermListListener implements ListDataListener {

        @Override
        public void intervalAdded(ListDataEvent lde) {
            /* topterm removed */
            refreshAction.actionPerformed(null);
        }

        @Override
        public void intervalRemoved(ListDataEvent lde) {
            /* topterm added */
            refreshAction.actionPerformed(null);
        }

        @Override
        public void contentsChanged(ListDataEvent lde) {
        }
    }

    class TopTermTableListener extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getSource() instanceof JTable) {
                JTable table = (JTable) e.getSource();
                int col = table.columnAtPoint(e.getPoint());
                int row = table.rowAtPoint(e.getPoint());
                if (col >= 0 && row >= 0) {
                    Object selected = table.getModel().getValueAt(row, col);
                    if (selected instanceof TopTerm) {
                        TopTerm topTerm = (TopTerm) selected;
                        /* add topTerm to list */
                        if (!listModel.contains(topTerm)) {
                            listModel.addElement(topTerm);
                        }
                    }
                }
            }
        }
    }
}